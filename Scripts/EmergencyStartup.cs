using UnityEngine;
using System.Collections;
using System.IO;

/// <summary>
/// Script de emerg√™ncia para garantir que a aplica√ß√£o n√£o fique presa 
/// na tela de loading (tr√™s bolinhas brancas piscando).
/// Este componente √© uma √∫ltima medida de seguran√ßa.
/// </summary>
public class EmergencyStartup : MonoBehaviour
{
    [Header("Configura√ß√µes")]
    [Tooltip("Tempo m√°ximo em segundos que a aplica√ß√£o pode ficar na tela de loading")]
    public float maxLoadingTime = 60f;
    [Tooltip("Se verdadeiro, inicia automaticamente um v√≠deo se o tempo m√°ximo for atingido")]
    public bool autoStartVideoOnTimeout = true;
    [Tooltip("Nome do v√≠deo a ser iniciado em caso de emerg√™ncia")]
    public string emergencyVideo = "rio.mp4";
    
    [Header("Estado")]
    [SerializeField] private float appUptime = 0f;
    [SerializeField] private bool emergencyActivated = false;
    [SerializeField] private string appState = "Inicializando";
    
    private VRManager vrManager;
    private DiagnosticUI diagnosticUI;
    private ConnectionHelper connectionHelper;
    
    void Start()
    {
        Debug.Log("üö® Sistema de emerg√™ncia iniciando...");
        
        // Agendar verifica√ß√£o ap√≥s um atraso inicial
        Invoke(nameof(CheckComponents), 5f);
        
        // Iniciar verifica√ß√£o de emerg√™ncia
        StartCoroutine(EmergencyCheckRoutine());
    }
    
    void Update()
    {
        appUptime += Time.deltaTime;
    }
    
    // Verifica se todos os componentes necess√°rios est√£o presentes
    void CheckComponents()
    {
        vrManager = FindObjectOfType<VRManager>();
        diagnosticUI = FindObjectOfType<DiagnosticUI>();
        connectionHelper = FindObjectOfType<ConnectionHelper>();
        
        // Criar diagn√≥stico se n√£o existir
        if (diagnosticUI == null)
        {
            Debug.LogWarning("DiagnosticUI n√£o encontrado - criando novo componente");
            GameObject diagObj = new GameObject("DiagnosticUI");
            diagnosticUI = diagObj.AddComponent<DiagnosticUI>();
        }
        
        // Criar connection helper se n√£o existir
        if (connectionHelper == null)
        {
            Debug.LogWarning("ConnectionHelper n√£o encontrado - criando novo componente");
            GameObject helperObj = new GameObject("ConnectionHelper");
            connectionHelper = helperObj.AddComponent<ConnectionHelper>();
            
            if (vrManager != null)
            {
                connectionHelper.vrManager = vrManager;
            }
        }
        
        Debug.Log("‚úÖ Verifica√ß√£o de componentes conclu√≠da");
    }
    
    // Verifica√ß√£o peri√≥dica para garantir que a aplica√ß√£o n√£o fique presa
    IEnumerator EmergencyCheckRoutine()
    {
        // Espera inicial
        yield return new WaitForSeconds(15f);
        
        appState = "Monitorando aplica√ß√£o";
        
        while (true)
        {
            // Verificar se VRManager est√° presente
            if (vrManager == null)
            {
                vrManager = FindObjectOfType<VRManager>();
            }
            
            // Verificar se aplica√ß√£o est√° presa na tela de loading
            if (vrManager != null && !vrManager.isPlaying && appUptime > maxLoadingTime && !emergencyActivated)
            {
                Debug.LogWarning($"üö® ALERTA! Aplica√ß√£o presa na tela de loading por {appUptime:F0} segundos");
                
                // Ativar procedimento de emerg√™ncia
                ActivateEmergencyProcedure();
                emergencyActivated = true;
            }
            
            yield return new WaitForSeconds(5f);
        }
    }
    
    // Procedimento de emerg√™ncia para sair da tela de loading
    void ActivateEmergencyProcedure()
    {
        Debug.Log("üö® Iniciando procedimento de emerg√™ncia!");
        appState = "Procedimento de emerg√™ncia ativado";
        
        // 1. Mostrar interface de diagn√≥stico
        if (diagnosticUI != null)
        {
            diagnosticUI.ShowDiagnostic();
        }
        
        // 2. For√ßar modo offline
        if (vrManager != null)
        {
            vrManager.offlineMode = true;
            Debug.Log("Mode offline ativado");
        }
        
        // 3. Se configurado, iniciar v√≠deo automaticamente
        if (autoStartVideoOnTimeout)
        {
            StartCoroutine(AutoStartVideo());
        }
    }
    
    // Inicia um v√≠deo automaticamente ap√≥s verifica√ß√£o
    IEnumerator AutoStartVideo()
    {
        Debug.Log("üé¨ Preparando para iniciar v√≠deo de emerg√™ncia...");
        yield return new WaitForSeconds(2f);
        
        // Verificar se j√° temos um v√≠deo em reprodu√ß√£o
        if (vrManager != null && !vrManager.isPlaying)
        {
            // Verificar se o v√≠deo de emerg√™ncia existe
            string videoToPlay = emergencyVideo;
            
            try
            {
                // Tentar encontrar um v√≠deo dispon√≠vel
                string externalPath = Path.Combine("/sdcard", "Download");
                if (Directory.Exists(externalPath))
                {
                    string emergencyFilePath = Path.Combine(externalPath, emergencyVideo);
                    
                    if (File.Exists(emergencyFilePath))
                    {
                        Debug.Log($"‚úÖ V√≠deo de emerg√™ncia encontrado: {emergencyVideo}");
                    }
                    else
                    {
                        // Procurar qualquer v√≠deo mp4
                        string[] mp4Files = Directory.GetFiles(externalPath, "*.mp4");
                        if (mp4Files.Length > 0)
                        {
                            videoToPlay = Path.GetFileName(mp4Files[0]);
                            Debug.Log($"‚úÖ Usando v√≠deo alternativo: {videoToPlay}");
                        }
                    }
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå Erro ao verificar v√≠deos: {e.Message}");
            }
            
            // For√ßar in√≠cio do v√≠deo
            Debug.Log($"üö® EMERG√äNCIA: For√ßando in√≠cio do v√≠deo {videoToPlay}");
            vrManager.ForcePlayVideo(videoToPlay);
            
            // Esconder interface de diagn√≥stico ap√≥s iniciar o v√≠deo
            yield return new WaitForSeconds(5f);
            if (diagnosticUI != null && vrManager.isPlaying)
            {
                diagnosticUI.HideDiagnostic();
            }
        }
    }
} 