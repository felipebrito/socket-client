#if UNITY_2019_3_OR_NEWER
#define USING_XR_MANAGEMENT
#endif

// Defini√ß√£o autom√°tica do Oculus SDK removida - agora √© manual
//#if UNITY_PACKAGE_MANAGER_SUPPORTS_OCULUS || USING_VR_MANAGEMENT
//#define USING_OCULUS_SDK
//#endif

using UnityEngine;
using UnityEngine.Video;
using UnityEngine.UI;
using System;
using System.Collections;
using System.Net.WebSockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using TMPro;
using UnityEngine.Networking; // Adicionado para UnityWebRequest
using System.IO; // Adicionado para Path
using System.Collections.Generic; // Adicionado para Dictionary
using System.Linq; // Adicionado para Where
using System.Diagnostics; // Adicionado para Process
using Debug = UnityEngine.Debug; // Especificar explicitamente qual Debug usar

#if UNITY_EDITOR
using UnityEditor;
using UnityEditor.Build.Reporting;
#endif

#if USING_XR_MANAGEMENT
using UnityEngine.XR.Management;
#endif

// Adicione essa diretiva para os trechos que usam o SDK do Oculus
#if USING_OCULUS_SDK
using Oculus.VR;
#endif

public class VRManager : MonoBehaviour {
    [Header("Video Settings")]
    public VideoPlayer videoPlayer;
    public string[] videoFiles = { "lencois.mp4", "rio.mp4", "pantanal.mp4" };
    private string currentVideo = "";

    [Header("External Storage Settings")]
    [Tooltip("Pasta externa onde os v√≠deos est√£o armazenados")]
    public string externalFolder = "Download"; // Pasta padr√£o de downloads
    [Tooltip("Tentar carregar v√≠deos do armazenamento externo primeiro")]
    public bool useExternalStorage = true;
    [Tooltip("Continuar mesmo se o acesso ao armazenamento externo for negado")]
    public bool continueWithoutStorage = true; // Nova op√ß√£o para ignorar erros de permiss√£o

    [Header("Fade Settings")]
    public GameObject fadeSphere;

    [Header("View Restriction Settings")]
    [Tooltip("Objeto que cont√©m a esfera do v√≠deo 360")]
    public Transform videoSphere;

    private bool isViewRestricted = false;
    private Transform cameraTransform;
    private bool isTransitioning = false;

    [Header("Networking")]
    public string serverUri = "ws://192.168.1.30:8181";
    private ClientWebSocket webSocket;

    [Header("UI Elements")]
    public TextMeshProUGUI messageText;
    public TextMeshProUGUI debugText; // Texto para mostrar informa√ß√µes de debug

    // Alterado para p√∫blico para que outros componentes possam verificar
    public bool isPlaying = false;
    private string externalStoragePath = "";
    private bool hasAutoStarted = false; // Controla se o v√≠deo j√° foi iniciado automaticamente
    private bool waitingForCommands = true;
    private float waitingTimer = 0f;

    [Header("Connection Settings")]
    [Tooltip("Intervalo de verifica√ß√£o de conex√£o em segundos")]
    public float connectionCheckInterval = 5f;
    [Tooltip("N√∫mero m√°ximo de tentativas de reconex√£o")]
    public int maxReconnectAttempts = 10;
    private int reconnectAttempts = 0;
    private bool isReconnecting = false;
    private bool wasPaused = false;

    [Header("Debug Settings")]
    [Tooltip("Ativa modo de diagn√≥stico com mais informa√ß√µes")]
    public bool diagnosticMode = true;
    [Tooltip("Permanecer offline, n√£o tentar conectar ao servidor")]
    public bool offlineMode = true; // Alterado para TRUE por padr√£o
    [Tooltip("Ignorar erros de rede e continuar")]
    public bool ignoreNetworkErrors = true;
    [Tooltip("Tempo em segundos para mostrar diagn√≥stico se a aplica√ß√£o n√£o avan√ßar")]
    public float showDiagnosticTimeout = 10f; // Reduzido para 10 segundos
    [Tooltip("Tempo em segundos para iniciar automaticamente um v√≠deo se ficar preso")]
    public float autoStartVideoTimeout = 15f; // Novo campo
    [Tooltip("Habilitar autostart de v√≠deo quando offline")]
    public bool enableAutoStart = false; // Nova op√ß√£o para controlar autostart

    [Header("Rotation Debug Settings")]
    [Tooltip("Habilitar debug visual da rota√ß√£o")]
    public bool enableRotationDebug = true;
    [Tooltip("Bloquear rota√ß√£o da c√¢mera")]
    public bool isRotationLocked = false;
    [Tooltip("Velocidade de rota√ß√£o no editor")]
    public float editorRotationSpeed = 60f;
    [Tooltip("√Çngulo m√°ximo de rota√ß√£o vertical")]
    public float maxVerticalAngle = 180f;
    [Tooltip("√Çngulo m√°ximo de rota√ß√£o horizontal")]
    public float maxHorizontalAngle = 180f;

    [Header("Editor Test Settings")]
    [Tooltip("Ponto focal padr√£o para testes no editor")]
    public Vector3 defaultFocalPoint = new Vector3(0, 0, 0);
    [Tooltip("√Çngulo m√°ximo de desvio permitido durante foco")]
    public float maxFocalDeviation = 30f;
    [Tooltip("Velocidade de retorno ao ponto focal")]
    public float returnToFocalSpeed = 2f;
    private bool isManualFocusActive = false;

    private Quaternion northOrientation = Quaternion.identity; // Refer√™ncia da orienta√ß√£o "norte"
    private bool isNorthCorrectionActive = false; // Flag para controlar corre√ß√£o da orienta√ß√£o

    [Header("VR Settings")]
    [Tooltip("Refer√™ncia ao XR Origin - necess√°rio para controle de rota√ß√£o em VR")]
    public Transform xrOrigin;

    [Header("Camera References")]
    [Tooltip("Refer√™ncia manual para a c√¢mera principal (opcional)")]
    public Camera mainCamera;
    private Transform activeCamera;

    // Estrutura para armazenar intervalos de bloqueio
    [System.Serializable]
    public class LockTimeRange {
        public float startTime;
        public float endTime;
        [Tooltip("√Çngulo m√°ximo de rota√ß√£o permitido")]
        public float maxAngle = 75f;
        [Tooltip("Velocidade de retorno ao centro")]
        public float resetSpeed = 2f;
        
        public LockTimeRange(float start, float end) {
            startTime = start;
            endTime = end;
        }
    }

    // Dicion√°rio de intervalos de bloqueio por v√≠deo - alterado para ser configur√°vel pelo editor
    [System.Serializable]
    public class VideoLockSettings {
        public string videoFileName;
        public List<LockTimeRange> lockRanges = new List<LockTimeRange>();
    }

    [Header("Lock Time Ranges")]
    [Tooltip("Configure aqui os intervalos de bloqueio para cada v√≠deo")]
    public List<VideoLockSettings> videoLockSettings = new List<VideoLockSettings>();
    private Dictionary<string, List<LockTimeRange>> lockTimeRanges = new Dictionary<string, List<LockTimeRange>>();

    void Awake() {
        #if UNITY_ANDROID && !UNITY_EDITOR
        // Configurar para tela cheia no Meta Quest 3
        Screen.fullScreen = true;
        Screen.orientation = ScreenOrientation.LandscapeLeft;
        
        // For√ßar modo VR e configura√ß√µes de renderiza√ß√£o espec√≠ficas para 360¬∞
        #if USING_OCULUS_SDK
        try {
            // Configura√ß√µes do OVRManager para Quest 3 - s√≥ executa se o SDK estiver dispon√≠vel
            OVRManager.instance.trackingOriginType = OVRManager.TrackingOrigin.FloorLevel;
            OVRManager.instance.useRecommendedMSAALevel = true;
            
            // Configurar display
            if (OVRPlugin.systemDisplayFrequenciesAvailable) {
                // Definir frequ√™ncia de atualiza√ß√£o para 90Hz
                OVRPlugin.systemDisplayFrequency = 90.0f;
                Debug.Log("Definida frequ√™ncia de atualiza√ß√£o para 90Hz no Meta Quest");
            }
            
            // Desativar filtro antialiasing que pode causar problemas
            OVRManager.eyeTextureAntiAliasing = OVRManager.EyeTextureAntiAliasing.NoAntiAliasing;
            
            // Configurar para experi√™ncia 360 imersiva
            Debug.Log("üëâ Configurado OVRManager para modo de visualiza√ß√£o 360¬∞");
            
            // For√ßar um redimensionamento da tela
            OVRManager.display.RecenterDisplay();
        }
        catch (Exception e) {
            Debug.LogError("Erro ao configurar OVRManager: " + e.Message);
        }
        #else
        // Configura√ß√µes para Quest sem o SDK do Oculus
        Debug.Log("Oculus SDK n√£o encontrado. Usando configura√ß√µes b√°sicas de VR.");
        
        // Configura√ß√µes b√°sicas de renderiza√ß√£o para VR sem Oculus SDK
        QualitySettings.vSyncCount = 0;
        Application.targetFrameRate = 72; // Framerate padr√£o para Quest 3
        #endif
        
        Debug.Log("‚ö†Ô∏è SOLICITANDO PERMISS√ïES NO AWAKE...");
        ForceRequestStoragePermission();
        
        // Garantir que o modo de renderiza√ß√£o √© apropriado para 360¬∞
        QualitySettings.vSyncCount = 0; // Desabilitar VSync para melhor performance em VR
        Application.targetFrameRate = 72; // Definir framerate alvo para dispositivos Meta Quest
        
        // Configurar c√¢mera para modo imersivo se estiver usando Video360
        var videoSphere = FindObjectOfType<VideoPlayer>()?.gameObject;
        if (videoSphere != null) {
            Debug.Log("Configurando esfera de v√≠deo para modo 360¬∞");
            
            // Garantir que a esfera de v√≠deo esteja configurada corretamente
            var sphereRenderer = videoSphere.GetComponent<Renderer>();
            if (sphereRenderer != null) {
                sphereRenderer.material.SetInt("_ZWrite", 0);
                sphereRenderer.material.SetInt("_Cull", 1); // Cull Front - renderizar o interior da esfera
            }
        }
        #endif
    }

    async void Start() {
        try {
            Debug.Log("‚úÖ Cliente VR iniciando...");
            
            // Mostrar mensagem inicial para informar que a aplica√ß√£o est√° iniciando
            if (messageText != null) {
                messageText.text = "Iniciando aplica√ß√£o VR...";
                messageText.gameObject.SetActive(true);
            }
            
            if (diagnosticMode) {
                // Adicionar texto de debug vis√≠vel
                UpdateDebugText("Inicializando VR Player...");
            }
            
            // Inicializar refer√™ncias da c√¢mera
            InitializeCameraReferences();
            
            #if UNITY_ANDROID && !UNITY_EDITOR && USING_OCULUS_SDK
            // Verificar se existe o OVRCameraRig na cena e configur√°-lo corretamente
            var ovrRig = FindObjectOfType<OVRCameraRig>();
            if (ovrRig != null) {
                Debug.Log("Verificando configura√ß√£o do OVRCameraRig para 360¬∞...");
                
                // Garantir que o tracking origin seja floor para experi√™ncia melhor
                var ovrManager = FindObjectOfType<OVRManager>();
                if (ovrManager != null) {
                    ovrManager.trackingOriginType = OVRManager.TrackingOrigin.FloorLevel;
                    Debug.Log("OVRManager tracking origin definido para FloorLevel");
                }
                
                // Posicionar o OVRCameraRig no centro da cena
                if (videoSphere != null) {
                    ovrRig.transform.position = videoSphere.position;
                    Debug.Log("OVRCameraRig posicionado no centro da esfera de v√≠deo");
                    
                    // Desativar qualquer componente que restrinja movimento
                    var limiter = ovrRig.GetComponent<CameraRotationLimiter>();
                    if (limiter != null && limiter.enabled) {
                        limiter.enabled = false;
                        Debug.Log("‚ö†Ô∏è CameraRotationLimiter desativado para permitir vis√£o 360¬∞");
                    }
                }
                
                // Verificar se o render scale est√° adequado para Quest 3
                float recommendedScale = 1.3f; // Valor recomendado para Quest 3
                if (OVRManager.instance != null && OVRManager.instance.eyeTextureResolutionScale < recommendedScale) {
                    OVRManager.instance.eyeTextureResolutionScale = recommendedScale;
                    Debug.Log($"Render scale ajustado para {recommendedScale} para melhor qualidade no Quest 3");
                }
            } else {
                Debug.LogWarning("OVRCameraRig n√£o encontrado na cena. A experi√™ncia 360¬∞ pode n√£o funcionar corretamente.");
            }
            #else
            // Configura√ß√£o alternativa para quando n√£o temos o Oculus SDK
            Debug.Log("Usando configura√ß√£o VR alternativa para 360¬∞ sem OVRCameraRig");
            
            // Posicionar a camera no centro da esfera de v√≠deo
            if (videoSphere != null && activeCamera != null) {
                activeCamera.transform.position = videoSphere.position;
                Debug.Log("C√¢mera posicionada no centro da esfera de v√≠deo");
                
                // Verificar se h√° um limitador de rota√ß√£o
                var limiter = FindObjectOfType<CameraRotationLimiter>();
                if (limiter != null) {
                    // Configurar o limitador para a esfera de v√≠deo
                    limiter.sphereTransform = videoSphere;
                    Debug.Log("CameraRotationLimiter configurado para a esfera de v√≠deo");
                    
                    // Verificar se deve ativar a limita√ß√£o
                    if (videoPlayer != null && videoPlayer.isPlaying) {
                        limiter.IsLimitActive = true;
                    }
                }
            }
            #endif
            
            SetFadeAlpha(0); // Inicialmente, tela transparente
            StartCoroutine(FadeOutToIdle());

            // Verificar se o videoPlayer est√° configurado
            bool videoPlayerReady = EnsureVideoPlayerIsReady();
            if (!videoPlayerReady) {
                UpdateDebugText("ALERTA: VideoPlayer n√£o encontrado! Alguns recursos podem n√£o funcionar.");
                if (messageText != null) {
                    messageText.text = "AVISO: VideoPlayer n√£o configurado";
                }
            }

            // Agora altera a mensagem para "Aguardando..."
            if (messageText != null) {
                messageText.text = "Aguardando in√≠cio da sess√£o...";
            }
            
            // Iniciar o timer de espera
            waitingForCommands = true;
            waitingTimer = 0f;
            hasAutoStarted = false;

            // Adicionar o ConnectionHelper se n√£o existir
            ConnectionHelper connectionHelper = FindObjectOfType<ConnectionHelper>();
            if (connectionHelper == null)
            {
                GameObject helperObj = new GameObject("ConnectionHelper");
                connectionHelper = helperObj.AddComponent<ConnectionHelper>();
                connectionHelper.vrManager = this;

                // Configurar callback para quando a conex√£o ficar presa
                connectionHelper.OnConnectionStuck += (msg) => {
                    LogError(msg);
                    UpdateDebugText("ALERTA: " + msg + "\n\nToque em um bot√£o do controle para mostrar diagn√≥stico");
                    
                    // Se estiver muito tempo sem resposta, tentar modo offline
                    if (waitingTimer > showDiagnosticTimeout * 2)
                    {
                        Log("Ativando modo offline automaticamente ap√≥s muito tempo sem resposta");
                        offlineMode = true;
                    }
                };
            }
            
            // Configurar o evento para quando o v√≠deo terminar
            if (videoPlayer != null) {
                videoPlayer.loopPointReached += OnVideoEnd;
            } else {
                LogError("VideoPlayer n√£o encontrado!");
            }

            // Verificar se o fadeSphere est√° configurado
            if (fadeSphere == null) {
                LogError("FadeSphere n√£o est√° configurado. Algumas transi√ß√µes podem n√£o funcionar.");
            }
            
            // Verificar se o videoSphere est√° configurado
            if (videoSphere == null) {
                LogError("VideoSphere n√£o est√° configurado. O bloqueio de vis√£o n√£o vai funcionar.");
                // Tenta encontrar automaticamente
                var viewSetup = FindObjectOfType<ViewSetup>();
                if (viewSetup != null && viewSetup.videoPlayerObject != null) {
                    videoSphere = viewSetup.videoPlayerObject;
                    Log("VideoSphere configurado automaticamente: " + videoSphere.name);
                }
            }

            try {
                // Inicializar caminho do armazenamento externo
                InitializeExternalStorage();
            }
            catch (Exception e) {
                LogError("Erro ao inicializar armazenamento externo: " + e.Message);
                if (continueWithoutStorage) {
                    Debug.Log("üîÑ Continuando sem acesso ao armazenamento externo devido a erro: " + e.Message);
                    useExternalStorage = false; // Desativar uso do armazenamento externo automaticamente
                }
            }
            
            try {
                // Inicializar intervalos de bloqueio para cada v√≠deo
                InitializeLockTimeRanges();
            }
            catch (Exception e) {
                LogError("Erro ao inicializar intervalos de bloqueio: " + e.Message);
            }

            // Configura√ß√µes de bloqueio - configurar para modo 1 (fixar em ponto espec√≠fico)
            // Este modo geralmente funciona melhor no Quest
            Log("Configurando o modo de bloqueio para fixar em ponto espec√≠fico");

            if (!offlineMode) {
                try {
                    await ConnectWebSocket();
                    // Inicia a verifica√ß√£o peri√≥dica de conex√£o
                    InvokeRepeating(nameof(CheckConnection), connectionCheckInterval, connectionCheckInterval);
                }
                catch (Exception e) {
                    LogError("Erro ao conectar ao servidor: " + e.Message);
                    if (diagnosticMode) {
                        UpdateDebugText("ERRO DE CONEX√ÉO: " + e.Message + "\nModo offline ativado.");
                    }
                    
                    // Sempre ativar modo offline em caso de erro
                    offlineMode = true;
                    Debug.Log("‚ö†Ô∏è Modo offline ativado automaticamente ap√≥s erro de conex√£o");
                }
            } else {
                Log("Modo offline ativado. N√£o conectando ao servidor.");
                if (diagnosticMode) {
                    UpdateDebugText("MODO OFFLINE\nCarregando primeiro v√≠deo dispon√≠vel...");
                }
                
                // Iniciar automaticamente um v√≠deo em modo offline ap√≥s um curto delay
                Invoke(nameof(AutoStartFirstVideo), 3f);
            }
            
            // Adiciona bot√µes de diagn√≥stico se necess√°rio
            if (diagnosticMode) {
                StartCoroutine(CreateDiagnosticButtons());
            }
            
            // Desativar scripts conflitantes para garantir controle centralizado
            DisableConflictingScripts();
            
            Log("Inicializa√ß√£o conclu√≠da!");

            #if UNITY_EDITOR
            // Abrir a janela de debug automaticamente no editor
            RotationDebugUI.ShowWindow();
            #endif
        }
        catch (Exception e) {
            LogError("ERRO CR√çTICO durante inicializa√ß√£o: " + e.Message);
            UpdateDebugText("ERRO CR√çTICO: " + e.Message + "\n\nReinicie o aplicativo.");
            
            // Em caso de erro cr√≠tico, tentar modo offline e autostart
            offlineMode = true;
            Invoke(nameof(AutoStartFirstVideo), 5f);
        }
    }
    
    // Helper para logs condicionais
    void Log(string message) {
        if (diagnosticMode) {
            Debug.Log("üîç [DIAGN√ìSTICO] " + message);
        } else {
            Debug.Log(message);
        }
    }
    
    // Helper para logs de erro
    void LogError(string message) {
        Debug.LogError("‚ùå " + message);
    }

    // Helper para logs de alerta
    void LogWarning(string message) {
        Debug.LogWarning("‚ö†Ô∏è " + message);
    }

    // Criar bot√µes de diagn√≥stico na interface
    IEnumerator CreateDiagnosticButtons() {
        yield return new WaitForSeconds(2.0f);
        
        // Aqui criaremos bot√µes para testes b√°sicos
        GameObject canvas = GameObject.Find("Canvas");
        if (canvas == null) {
            yield break;
        }
        
        // Criar bot√µes para teste de v√≠deos
        foreach (string videoFile in videoFiles) {
            GameObject button = new GameObject("Button_" + videoFile);
            button.transform.SetParent(canvas.transform, false);
            
            // Adicionar componentes do bot√£o...
            // (C√≥digo simplificado para evitar complexidade)
            
            // Se estamos em modo UI apenas, adicionar evento diretamente
            Button btn = button.AddComponent<Button>();
            string videoName = videoFile; // Captura para o lambda
            btn.onClick.AddListener(() => PlayVideoWithFade(videoName));
            
            Log("Bot√£o de diagn√≥stico criado para: " + videoFile);
        }
    }

    // Configura√ß√£o dos intervalos de bloqueio para cada v√≠deo
    void InitializeLockTimeRanges() {
        // Limpar dicion√°rio antigo
        lockTimeRanges.Clear();
        
        // Primeiro carregar do editor
        foreach (var setting in videoLockSettings) {
            if (!string.IsNullOrEmpty(setting.videoFileName)) {
                lockTimeRanges[setting.videoFileName] = setting.lockRanges;
                Log($"Carregados {setting.lockRanges.Count} intervalos para o v√≠deo {setting.videoFileName} das configura√ß√µes do editor");
            }
        }
        
        // Se n√£o temos dados do editor para alguns v√≠deos, adicionar os valores padr√£o
        if (!lockTimeRanges.ContainsKey("rio.mp4")) {
            List<LockTimeRange> rioRanges = new List<LockTimeRange> {
                new LockTimeRange(20, 44) { maxAngle = 75f, resetSpeed = 2f },
                new LockTimeRange(159, 228) { maxAngle = 75f, resetSpeed = 2f } // 02:39 at√© 03:48
            };
            lockTimeRanges.Add("rio.mp4", rioRanges);
            Log("Adicionados intervalos padr√£o para rio.mp4");
        }
        
        if (!lockTimeRanges.ContainsKey("amazonia.mp4")) {
            List<LockTimeRange> amazoniaRanges = new List<LockTimeRange> {
                new LockTimeRange(115, 130) { maxAngle = 75f, resetSpeed = 2f }, // 01:55 at√© 02:10
                new LockTimeRange(197, 205) { maxAngle = 75f, resetSpeed = 2f }  // 03:17 at√© 03:25
            };
            lockTimeRanges.Add("amazonia.mp4", amazoniaRanges);
            Log("Adicionados intervalos padr√£o para amazonia.mp4");
        }
        
        if (!lockTimeRanges.ContainsKey("noronha.mp4")) {
            List<LockTimeRange> noronhaRanges = new List<LockTimeRange> {
                new LockTimeRange(40, 59) { maxAngle = 75f, resetSpeed = 2f }
            };
            lockTimeRanges.Add("noronha.mp4", noronhaRanges);
            Log("Adicionados intervalos padr√£o para noronha.mp4");
        }
        
        Debug.Log("üîí Intervalos de bloqueio configurados para todos os v√≠deos");
        
        // Exibir informa√ß√µes para depura√ß√£o
        foreach (var entry in lockTimeRanges) {
            string videoName = entry.Key;
            List<LockTimeRange> ranges = entry.Value;
            
            string rangeInfo = $"V√≠deo {videoName} tem {ranges.Count} intervalos de bloqueio:";
            foreach (var range in ranges) {
                rangeInfo += $"\n  - {range.startTime}s a {range.endTime}s";
            }
            
            Debug.Log(rangeInfo);
        }
    }

    // Atualizar texto de debug na UI
    void UpdateDebugText(string message) {
        if (debugText != null) {
            debugText.text = message;
            debugText.gameObject.SetActive(true); // Garante que est√° vis√≠vel
        } else if (diagnosticMode) {
            // Se n√£o temos debugText mas estamos em modo diagn√≥stico, 
            // tenta criar um texto de debug
            Canvas canvas = FindObjectOfType<Canvas>();
            if (canvas != null) {
                GameObject debugObj = new GameObject("DebugText");
                debugObj.transform.SetParent(canvas.transform, false);
                debugText = debugObj.AddComponent<TextMeshProUGUI>();
                debugText.fontSize = 24;
                debugText.color = Color.white;
                debugText.rectTransform.anchoredPosition = new Vector2(0, 200);
                debugText.rectTransform.sizeDelta = new Vector2(600, 400);
                debugText.alignment = TextAlignmentOptions.Center;
                debugText.text = message;
            }
        }
    }

    void Update() {
        try {
            // Verificar refer√™ncias importantes
            if (videoSphere == null) {
                videoSphere = GameObject.Find("VideoSphere")?.transform;
                if (videoSphere == null) {
                    var possibleSpheres = FindObjectsOfType<Transform>().Where(t => 
                        t.name.Contains("Video") && t.name.Contains("Sphere") ||
                        t.name.Contains("360") && t.name.Contains("Sphere"));
                    
                    if (possibleSpheres.Any()) {
                        videoSphere = possibleSpheres.First();
                        Debug.Log("VideoSphere encontrado automaticamente: " + videoSphere.name);
                    }
                }
            }
        
            // Verificar se o v√≠deo est√° tocando e se deve aplicar restri√ß√£o de visualiza√ß√£o
            if (videoPlayer != null && videoPlayer.isPlaying && !string.IsNullOrEmpty(currentVideo)) {
                CheckForViewRestriction();
            }

            // Controles para teste no editor
            #if UNITY_EDITOR
            HandleEditorControls();
            #endif

            // Verificar timeout para mostrar diagn√≥stico se estiver aguardando muito tempo
            if (waitingForCommands) {
                waitingTimer += Time.deltaTime;
                
                // Ap√≥s o timeout, mostrar interface de diagn√≥stico
                if (waitingTimer > showDiagnosticTimeout && !hasAutoStarted) {
                    LogError("Timeout ao aguardar comandos do servidor ap√≥s " + showDiagnosticTimeout + " segundos");
                    
                    // Mostrar diagn√≥stico
                    var diagnostic = FindObjectOfType<DiagnosticUI>();
                    if (diagnostic != null) {
                        diagnostic.ShowDiagnostic();
                        UpdateDebugText("Aguardou muito tempo por comandos.\nInterface de diagn√≥stico ativada.");
                    } else {
                        // Tentar criar se n√£o existir
                        DiagnosticUI.ShowDiagnosticUI();
                    }
                }
                
                // Ap√≥s mais tempo, iniciar automaticamente um v√≠deo apenas se enableAutoStart for true
                if (waitingTimer > autoStartVideoTimeout && !hasAutoStarted && enableAutoStart) {
                    LogError("Timeout prolongado. Iniciando v√≠deo automaticamente.");
                    waitingForCommands = false;
                    
                    // Ativar modo offline e iniciar primeiro v√≠deo
                    offlineMode = true;
                    AutoStartFirstVideo();
                }
            }

            // Debug visual da rota√ß√£o
            if (enableRotationDebug && cameraTransform != null) {
                DrawRotationDebug();
            }
        }
        catch (Exception e) {
            LogError("Erro no Update: " + e.Message);
        }
    }

    // Verifica se o tempo atual do v√≠deo est√° em um intervalo de bloqueio
    void CheckForViewRestriction() {
        if (videoPlayer == null || !videoPlayer.isPlaying || string.IsNullOrEmpty(currentVideo)) 
            return;
            
        float currentTime = (float)videoPlayer.time;
        bool shouldBeRestricted = false;
        LockTimeRange currentRange = null;
        
        // Procura nos intervalos de bloqueio do v√≠deo atual
        if (lockTimeRanges.ContainsKey(currentVideo)) {
            foreach (var range in lockTimeRanges[currentVideo]) {
                if (currentTime >= range.startTime && currentTime <= range.endTime) {
                    shouldBeRestricted = true;
                    currentRange = range;
                    break;
                }
            }
        }
        
        // Atualizar estado de restri√ß√£o
        isViewRestricted = shouldBeRestricted;
        
        // Se estamos em um per√≠odo de bloqueio, aplicar restri√ß√µes
        if (isViewRestricted && currentRange != null) {
            ApplyViewRestriction(currentRange);
        }
    }
    
    // Aplica a restri√ß√£o de visualiza√ß√£o ajustando a rota√ß√£o da esfera de v√≠deo
    void ApplyViewRestriction(LockTimeRange range) {
        #if UNITY_ANDROID && !UNITY_EDITOR
        if (xrOrigin == null || cameraTransform == null) return;

        // Obter rota√ß√£o atual do XROrigin
        float currentYaw = xrOrigin.eulerAngles.y;
        if (currentYaw > 180) currentYaw -= 360;

        // Se a rota√ß√£o exceder o limite
        if (Mathf.Abs(currentYaw) > range.maxAngle) {
            // Calcular a rota√ß√£o alvo mantendo X e Z
            Vector3 currentRotation = xrOrigin.eulerAngles;
            float clampedYaw = Mathf.Clamp(currentYaw, -range.maxAngle, range.maxAngle);
            
            Quaternion targetRotation = Quaternion.Euler(
                currentRotation.x,
                clampedYaw,
                currentRotation.z
            );

            // Aplicar rota√ß√£o suave
            xrOrigin.rotation = Quaternion.Lerp(
                xrOrigin.rotation,
                targetRotation,
                range.resetSpeed * Time.deltaTime
            );
        }
        #else
        if (videoSphere == null || cameraTransform == null) return;

        // Obter rota√ß√£o atual
        Vector3 currentRotation = videoSphere.localEulerAngles;
        float currentYaw = currentRotation.y;
        if (currentYaw > 180) currentYaw -= 360;

        // Se exceder o limite
        if (Mathf.Abs(currentYaw) > range.maxAngle) {
            // Calcular rota√ß√£o alvo
            float clampedYaw = Mathf.Clamp(currentYaw, -range.maxAngle, range.maxAngle);
            Quaternion targetRotation = Quaternion.Euler(
                currentRotation.x,
                clampedYaw,
                currentRotation.z
            );

            // Aplicar rota√ß√£o suave
            videoSphere.rotation = Quaternion.Lerp(
                videoSphere.rotation,
                targetRotation,
                range.resetSpeed * Time.deltaTime
            );
        }
        #endif
    }

    // M√©todo para verificar se o VideoPlayer est√° configurado corretamente
    bool EnsureVideoPlayerIsReady() {
        if (videoPlayer == null) {
            videoPlayer = GetComponent<VideoPlayer>();
            if (videoPlayer == null) {
                LogError("VideoPlayer n√£o encontrado! Tentando encontrar na cena...");
                videoPlayer = FindObjectOfType<VideoPlayer>();
                if (videoPlayer == null) {
                    LogError("Nenhum VideoPlayer encontrado na cena!");
                    return false;
                }
            }
        }
        
        // Verificar se o VideoPlayer tem uma renderTexture ou um targetCamera
        if (videoPlayer.targetTexture == null && videoPlayer.targetCamera == null) {
            LogWarning("VideoPlayer n√£o tem targetTexture ou targetCamera configurado!");
        }
        
        return true;
    }

    // M√©todo para reproduzir um v√≠deo com fade
    public void PlayVideoWithFade(string videoName) {
        if (string.IsNullOrEmpty(videoName)) {
            LogError("Nome do v√≠deo n√£o especificado!");
            return;
        }
        
        Debug.Log($"üé¨ Iniciando reprodu√ß√£o do v√≠deo: {videoName}");
        
        // Resetar o timer quando inicia um v√≠deo
        waitingForCommands = false;
        waitingTimer = 0f;
        hasAutoStarted = true; // Marcar como iniciado para evitar autostart
        
        // Atualizar o v√≠deo atual
        currentVideo = videoName;
        
        // Resetar o estado de bloqueio ao iniciar novo v√≠deo
        isViewRestricted = false;
        
        // Para testes: exibir informa√ß√µes sobre os intervalos de bloqueio
        if (diagnosticMode && lockTimeRanges.ContainsKey(videoName)) {
            string blockInfo = $"V√≠deo {videoName} tem {lockTimeRanges[videoName].Count} bloqueios:";
            foreach (var block in lockTimeRanges[videoName]) {
                blockInfo += $"\n{block.startTime}s-{block.endTime}s";
            }
            UpdateDebugText(blockInfo);
        }
        
        // Iniciar o fade in
        StartCoroutine(FadeIn(() => {
            // Ap√≥s o fade in, configurar e iniciar o v√≠deo
            PrepareAndPlayVideo(videoName);
            
            // Inicializar com orienta√ß√£o neutra
            if (videoSphere != null) {
                videoSphere.rotation = Quaternion.identity;
                Log("V√≠deo iniciado com orienta√ß√£o padr√£o");
            }
        }));
    }
    
    // M√©todo para preparar e reproduzir um v√≠deo
    void PrepareAndPlayVideo(string videoName) {
        try {
            if (videoPlayer == null) {
                LogError("VideoPlayer n√£o est√° configurado!");
                return;
            }
            
            // Ativar o objeto do VideoPlayer se estiver desativado
            if (!videoPlayer.gameObject.activeSelf) {
                videoPlayer.gameObject.SetActive(true);
            }
            
            // Parar qualquer v√≠deo em reprodu√ß√£o
            if (videoPlayer.isPlaying) {
                videoPlayer.Stop();
            }
            
            // Configurar o caminho do v√≠deo
            string videoPath = "";
            bool videoFound = false;
            
            // Tentar carregar do armazenamento externo primeiro, se habilitado
            if (useExternalStorage) {
                try {
                    string externalPath = Path.Combine(externalStoragePath, videoName);
                    if (File.Exists(externalPath)) {
                        videoPath = externalPath;
                        videoFound = true;
                        Debug.Log($"‚úÖ V√≠deo encontrado no armazenamento externo: {externalPath}");
                    } else {
                        Debug.LogWarning($"‚ö†Ô∏è V√≠deo n√£o encontrado no armazenamento externo: {externalPath}");
                    }
                } catch (Exception e) {
                    LogError($"Erro ao acessar armazenamento externo: {e.Message}");
                }
            }
            
            // Se n√£o encontrou no armazenamento externo, usar o caminho interno (streaming assets)
            if (!videoFound) {
                #if UNITY_ANDROID && !UNITY_EDITOR
                videoPath = Path.Combine(Application.streamingAssetsPath, videoName);
                #else
                videoPath = "file://" + Path.Combine(Application.streamingAssetsPath, videoName);
                #endif
                
                Debug.Log($"üîÑ Usando v√≠deo interno: {videoPath}");
            }
            
            // Configurar o VideoPlayer
            videoPlayer.url = videoPath;
            videoPlayer.isLooping = false;
            videoPlayer.playOnAwake = false;
            
            // Configura√ß√µes adicionais para garantir que o v√≠deo seja reproduzido em 360¬∞
            #if UNITY_ANDROID && !UNITY_EDITOR
            // Garantir que o renderMode √© apropriado para 360¬∞
            videoPlayer.renderMode = VideoRenderMode.MaterialOverride;
            videoPlayer.targetMaterialRenderer = videoSphere?.GetComponent<Renderer>();
            videoPlayer.targetMaterialProperty = "_MainTex";
            
            // Configurar a esfera de v√≠deo para rota√ß√£o correta
            if (videoSphere != null) {
                // Resetar a rota√ß√£o da esfera para garantir visualiza√ß√£o correta
                videoSphere.rotation = Quaternion.identity;
                Debug.Log("Esfera de v√≠deo resetada para visualiza√ß√£o 360¬∞ ideal");
                
                // Garantir que renderiza√ß√£o da esfera esteja correta (dentro para fora)
                Renderer sphereRenderer = videoSphere.GetComponent<Renderer>();
                if (sphereRenderer != null && sphereRenderer.material != null) {
                    sphereRenderer.material.SetInt("_Cull", 1); // Front culling - renderiza apenas o interior
                    sphereRenderer.material.SetInt("_ZWrite", 0); // Desativa escrita no z-buffer
                    Debug.Log("Material da esfera configurado para visualiza√ß√£o 360¬∞");
                }
                
                // Verificar se h√° um ViewSetup na cena e for√ßar reconfigura√ß√£o
                var viewSetup = FindObjectOfType<ViewSetup>();
                if (viewSetup != null && viewSetup.videoPlayerObject != null) {
                    viewSetup.forceFullSphereRendering = true;
                    
                    // Verificar se o m√©todo ConfigureVideoSphereForFullRendering existe
                    var methodInfo = viewSetup.GetType().GetMethod("ConfigureVideoSphereForFullRendering", 
                        System.Reflection.BindingFlags.Instance | 
                        System.Reflection.BindingFlags.Public | 
                        System.Reflection.BindingFlags.NonPublic);
                    
                    if (methodInfo != null) {
                        methodInfo.Invoke(viewSetup, null);
                        Debug.Log("ViewSetup solicitado para reconfigurar esfera de v√≠deo");
                    } else {
                        // Configura√ß√£o manual da esfera
                        ConfigureVideoSphereForVR(viewSetup.videoPlayerObject);
                    }
                }
                
                // Atualizar o CameraRotationLimiter
                var limiter = FindObjectOfType<CameraRotationLimiter>();
                if (limiter != null) {
                    limiter.sphereTransform = videoSphere;
                    limiter.videoPlayer = videoPlayer;
                    Debug.Log("CameraRotationLimiter configurado para o novo v√≠deo");
                }
            }
            #endif
            
            // Configurar eventos
            videoPlayer.prepareCompleted += (vp) => {
                Debug.Log("‚úÖ V√≠deo preparado com sucesso!");
                vp.Play();
                isPlaying = true;
                
                // Iniciar o fade out ap√≥s o v√≠deo come√ßar
                StartCoroutine(FadeOut());
                
                // Atualizar a UI
                if (messageText != null) {
                    messageText.text = $"Reproduzindo: {videoName}";
                    StartCoroutine(HideMessageAfterDelay(3f));
                }
                
                // Enviar timecode a cada 5 segundos
                InvokeRepeating(nameof(SendTimecode), 5f, 5f);
            };
            
            videoPlayer.errorReceived += (vp, error) => {
                LogError($"‚ùå Erro no VideoPlayer: {error}");
                UpdateDebugText($"ERRO DE V√çDEO: {error}\nVerifique se o arquivo existe e tem permiss√µes.");
                isPlaying = false;
            };
            
            // Preparar o v√≠deo (carrega o v√≠deo mas n√£o inicia a reprodu√ß√£o)
            videoPlayer.Prepare();
            
            Debug.Log($"üîÑ Preparando v√≠deo: {videoPath}");
            
            // Mostrar mensagem de carregamento
            if (messageText != null) {
                messageText.text = "Carregando v√≠deo...";
                messageText.gameObject.SetActive(true);
            }
            
            // Configurar a transpar√™ncia do v√≠deo para 1 (totalmente vis√≠vel)
            videoPlayer.targetCameraAlpha = 1;
        } catch (Exception e) {
            LogError($"‚ùå Erro ao preparar v√≠deo: {e.Message}");
            UpdateDebugText($"ERRO: {e.Message}");
        }
    }
    
    // M√©todo auxiliar para configurar a esfera de v√≠deo para VR
    private void ConfigureVideoSphereForVR(Transform sphere) {
        if (sphere == null) return;
        
        // Configurar o material da esfera
        Renderer renderer = sphere.GetComponent<Renderer>();
        if (renderer != null && renderer.material != null) {
            // Configurar culling para renderizar o interior da esfera
            renderer.material.SetInt("_Cull", 1); // Front culling
            renderer.material.SetInt("_ZWrite", 0); // Desativar escrita no z-buffer
            
            Debug.Log("Esfera de v√≠deo configurada manualmente para VR");
        }
        
        // Verificar se temos um MeshFilter para inverter normais se necess√°rio
        MeshFilter meshFilter = sphere.GetComponent<MeshFilter>();
        if (meshFilter != null && meshFilter.sharedMesh != null) {
            // Verificar se as normais j√° est√£o invertidas
            bool needsInversion = true;
            
            // Criar uma c√≥pia da malha para n√£o modificar o asset original
            if (needsInversion) {
                try {
                    Mesh mesh = Instantiate(meshFilter.sharedMesh);
                    
                    // Inverter normais
                    Vector3[] normals = mesh.normals;
                    for (int i = 0; i < normals.Length; i++) {
                        normals[i] = -normals[i];
                    }
                    mesh.normals = normals;
                    
                    // Inverter ordem dos tri√¢ngulos para renderiza√ß√£o correta
                    int[] triangles = mesh.triangles;
                    for (int i = 0; i < triangles.Length; i += 3) {
                        int temp = triangles[i];
                        triangles[i] = triangles[i + 2];
                        triangles[i + 2] = temp;
                    }
                    mesh.triangles = triangles;
                    
                    // Atribuir malha modificada
                    meshFilter.mesh = mesh;
                    Debug.Log("Normais da esfera invertidas para renderiza√ß√£o interna");
                } catch (Exception e) {
                    Debug.LogError("Erro ao inverter normais da esfera: " + e.Message);
                }
            }
        }
    }
    
    // M√©todo para pausar o v√≠deo
    public void PauseVideo() {
        if (videoPlayer != null && videoPlayer.isPlaying) {
            videoPlayer.Pause();
            Debug.Log("‚è∏Ô∏è V√≠deo pausado");
            
            // Atualizar a UI
            if (messageText != null) {
                messageText.text = "V√≠deo pausado";
                messageText.gameObject.SetActive(true);
            }
            
            // Parar de enviar timecodes
            CancelInvoke(nameof(SendTimecode));
        }
    }
    
    // M√©todo para retomar a reprodu√ß√£o do v√≠deo
    public void ResumeVideo() {
        if (videoPlayer != null && !videoPlayer.isPlaying) {
            videoPlayer.Play();
            Debug.Log("‚ñ∂Ô∏è V√≠deo retomado");
            
            // Atualizar a UI
            if (messageText != null) {
                messageText.text = "V√≠deo retomado";
                StartCoroutine(HideMessageAfterDelay(2f));
            }
            
            // Retomar envio de timecodes
            InvokeRepeating(nameof(SendTimecode), 5f, 5f);
        }
    }
    
    // M√©todo para parar o v√≠deo
    public void StopVideo() {
        if (videoPlayer != null) {
            videoPlayer.Stop();
            isPlaying = false;
            Debug.Log("‚èπÔ∏è V√≠deo parado");
            
            // Atualizar a UI
            if (messageText != null) {
                messageText.text = "V√≠deo parado";
                StartCoroutine(HideMessageAfterDelay(2f));
            }
            
            // Parar de enviar timecodes
            CancelInvoke(nameof(SendTimecode));
        }
    }
    
    // M√©todo para parar o v√≠deo com fade
    public void StopVideoWithFade() {
        Debug.Log("üé¨ Parando v√≠deo com fade");
        
        // Iniciar o fade in
        StartCoroutine(FadeIn(() => {
            // Ap√≥s o fade in, parar o v√≠deo
            StopVideo();
            
            // Iniciar o fade out para o estado de espera
            StartCoroutine(FadeOutToIdle());
            
            // Atualizar a UI
            if (messageText != null) {
                messageText.text = "Aguardando pr√≥ximo v√≠deo...";
                messageText.gameObject.SetActive(true);
            }
        }));
    }

    // Novo m√©todo para desenhar o debug visual da rota√ß√£o
    void DrawRotationDebug() {
        if (!enableRotationDebug || cameraTransform == null) return;

        // Atualizar o debug UI no editor
        #if UNITY_EDITOR
        // O RotationDebugUI j√° cuida da visualiza√ß√£o
        return;
        #endif
    }

    // M√©todo atualizado para controles no editor
    #if UNITY_EDITOR
    void HandleEditorControls() {
        if (videoSphere == null) return;

        // Se a rota√ß√£o estiver bloqueada, n√£o permitir movimento
        if (isRotationLocked) return;

        // Controle de foco com tecla F
        if (Input.GetKeyDown(KeyCode.F)) {
            isManualFocusActive = !isManualFocusActive;
            Log(isManualFocusActive ? "Foco manual ativado" : "Foco manual desativado");
        }

        // Detectar teclas de setas
        float horizontalInput = 0f;
        float verticalInput = 0f;

        // FUNDAMENTAL: Para criar uma experi√™ncia natural de visualiza√ß√£o 360¬∞,
        // quando o usu√°rio pressiona uma tecla de dire√ß√£o, a esfera deve girar na dire√ß√£o OPOSTA

        // Quando o usu√°rio pressiona Esquerda, quer olhar para a esquerda,
        // ent√£o rotacionamos a esfera para a direita (valor positivo)
        if (Input.GetKey(KeyCode.LeftArrow)) horizontalInput = 1f;
        
        // Quando o usu√°rio pressiona Direita, quer olhar para a direita,
        // ent√£o rotacionamos a esfera para a esquerda (valor negativo)
        if (Input.GetKey(KeyCode.RightArrow)) horizontalInput = -1f;
        
        // Quando o usu√°rio pressiona Cima, quer olhar para cima,
        // ent√£o rotacionamos a esfera para baixo (valor positivo no eixo X)
        if (Input.GetKey(KeyCode.UpArrow)) verticalInput = 1f;
        
        // Quando o usu√°rio pressiona Baixo, quer olhar para baixo,
        // ent√£o rotacionamos a esfera para cima (valor negativo no eixo X)
        if (Input.GetKey(KeyCode.DownArrow)) verticalInput = -1f;
        
        float rotationSpeed = editorRotationSpeed * Time.deltaTime;
        
        if (horizontalInput != 0 || verticalInput != 0) {
            // Simulando a experi√™ncia de estar dentro da esfera olhando para fora

            // Pegar a rota√ß√£o atual
            Vector3 currentRotation = videoSphere.eulerAngles;

            // Aplicar as rota√ß√µes
            currentRotation.y += horizontalInput * rotationSpeed;
            currentRotation.x += verticalInput * rotationSpeed;

            // Limita√ß√£o do √¢ngulo vertical para evitar problemas
            float xAngle = currentRotation.x;
            if (xAngle > 180) xAngle -= 360;  // Converter para o intervalo -180 a 180
            
            // Limitar o √¢ngulo vertical
            if (Mathf.Abs(xAngle) > maxVerticalAngle) {
                xAngle = Mathf.Clamp(xAngle, -maxVerticalAngle, maxVerticalAngle);
                currentRotation.x = xAngle;
            }
            
            // Manter o Z em zero para que o horizonte permane√ßa nivelado
            currentRotation.z = 0;
            
            // Aplicar a rota√ß√£o
            videoSphere.eulerAngles = currentRotation;
            
            // Log para debug
            if (enableRotationDebug) {
                Debug.Log($"Visualizando: √Çngulo X (cima/baixo)={xAngle:F1}¬∞ Y (esq/dir)={currentRotation.y:F1}¬∞");
            }
        }

        // Resetar rota√ß√£o com barra de espa√ßo
        if (Input.GetKeyDown(KeyCode.Space)) {
            videoSphere.rotation = Quaternion.identity;
            Log("Visualiza√ß√£o resetada para o centro");
        }
        
        // Teclas para ajuste da velocidade de rota√ß√£o
        if (Input.GetKey(KeyCode.LeftBracket)) { // [
            editorRotationSpeed = Mathf.Max(10f, editorRotationSpeed - 10f * Time.deltaTime);
            Debug.Log($"Velocidade de rota√ß√£o reduzida: {editorRotationSpeed:F1}");
        }
        
        if (Input.GetKey(KeyCode.RightBracket)) { // ]
            editorRotationSpeed = Mathf.Min(120f, editorRotationSpeed + 10f * Time.deltaTime);
            Debug.Log($"Velocidade de rota√ß√£o aumentada: {editorRotationSpeed:F1}");
        }
        
        // Teclas para ajuste do √¢ngulo vertical m√°ximo
        if (Input.GetKey(KeyCode.Plus) || Input.GetKey(KeyCode.KeypadPlus)) {
            maxVerticalAngle = Mathf.Min(maxVerticalAngle + 5f * Time.deltaTime, 180f);
            Debug.Log($"√Çngulo vertical m√°ximo: {maxVerticalAngle:F1}¬∞");
        }
        
        if (Input.GetKey(KeyCode.Minus) || Input.GetKey(KeyCode.KeypadMinus)) {
            maxVerticalAngle = Mathf.Max(maxVerticalAngle - 5f * Time.deltaTime, 10f);
            Debug.Log($"√Çngulo vertical m√°ximo: {maxVerticalAngle:F1}¬∞");
        }
    }
    #endif

    void OnApplicationPause(bool pauseStatus) {
        Debug.Log($"üéÆ Aplica√ß√£o {(pauseStatus ? "pausada" : "retomada")}");
        wasPaused = pauseStatus;
        
        if (!pauseStatus) {
            // Aplica√ß√£o foi retomada ap√≥s pausa (usu√°rio colocou o headset novamente)
            Debug.Log("üîÑ Headset retomado, verificando conex√£o...");
            CancelInvoke(nameof(CheckConnection)); // Cancela verifica√ß√£o anterior se houver
            Invoke(nameof(CheckConnection), 2f); // Verifica conex√£o ap√≥s 2 segundos
            UpdateDebugText("Verificando conex√£o ap√≥s retomada...");
        }
    }
    
    // Verificar periodicamente se a conex√£o est√° ativa
    void CheckConnection() {
        if (webSocket == null || webSocket.State != WebSocketState.Open) {
            if (!isReconnecting) {
                Debug.LogWarning("üîç Conex√£o WebSocket fechada ou inv√°lida. Tentando reconectar...");
                UpdateDebugText("Conex√£o perdida. Reconectando...");
                ReconnectWebSocket();
            }
        } else {
            // Conex√£o est√° OK, reseta contagem de tentativas
            reconnectAttempts = 0;
            
            // Envia um ping para garantir que a conex√£o est√° ativa
            SendPing();
        }
    }
    
    async void SendPing() {
        try {
            if (webSocket != null && webSocket.State == WebSocketState.Open) {
                string pingMessage = "PING:" + DateTime.Now.Ticks;
                byte[] data = Encoding.UTF8.GetBytes(pingMessage);
                await webSocket.SendAsync(new ArraySegment<byte>(data), WebSocketMessageType.Text, true, CancellationToken.None);
                Debug.Log("üì° Ping enviado");
            }
        } catch (Exception e) {
            Debug.LogError($"‚ùå Erro ao enviar ping: {e.Message}");
            if (!isReconnecting) {
                ReconnectWebSocket();
            }
        }
    }

    async void ReconnectWebSocket() {
        if (isReconnecting) return;
        
        isReconnecting = true;
        
        if (reconnectAttempts >= maxReconnectAttempts) {
            Debug.LogError($"‚ùå Excedido n√∫mero m√°ximo de tentativas de reconex√£o ({maxReconnectAttempts})");
            UpdateDebugText("Falha na reconex√£o. Tente reiniciar o aplicativo.");
            isReconnecting = false;
            return;
        }
        
        reconnectAttempts++;
        
        // Fecha a conex√£o anterior se ainda existir
        if (webSocket != null) {
            try {
                // Tenta fechar a conex√£o de forma limpa
                if (webSocket.State == WebSocketState.Open) {
                    CancellationTokenSource cts = new CancellationTokenSource(1000); // Timeout de 1 segundo
                    await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Reconectando", cts.Token);
                }
                webSocket.Dispose();
            } catch (Exception e) {
                Debug.LogWarning($"‚ö†Ô∏è Erro ao fechar websocket: {e.Message}");
            }
        }
        
        Debug.Log($"üîÑ Tentativa de reconex√£o {reconnectAttempts}/{maxReconnectAttempts}...");
        UpdateDebugText($"Reconectando... Tentativa {reconnectAttempts}/{maxReconnectAttempts}");
        
        // Aguarda um tempo com base no n√∫mero de tentativas (backoff exponencial)
        float waitTime = Mathf.Min(1 * Mathf.Pow(1.5f, reconnectAttempts - 1), 10);
        await Task.Delay((int)(waitTime * 1000));
        
        // Tenta conectar novamente
        await ConnectWebSocket();
        
        isReconnecting = false;
    }

    async Task ConnectWebSocket() {
        webSocket = new ClientWebSocket();
        Debug.Log("üåê Tentando conectar ao WebSocket em " + serverUri);

        try {
            await webSocket.ConnectAsync(new Uri(serverUri), CancellationToken.None);
            Debug.Log("‚úÖ Conex√£o WebSocket bem-sucedida.");
            UpdateDebugText("Conex√£o estabelecida");
            ReceiveMessages();
            SendClientInfo(); // Enviar informa√ß√µes do cliente ao conectar
            
            // Conex√£o bem-sucedida, reseta contador de tentativas
            reconnectAttempts = 0;
        } catch (Exception e) {
            Debug.LogError($"‚ùå Erro ao conectar ao WebSocket: {e.Message}");
            UpdateDebugText("Erro de conex√£o: " + e.Message);
            
            // Agenda uma nova tentativa
            if (!isReconnecting) {
                Invoke(nameof(ReconnectWebSocket), 5f);
            }
        }
    }

    async void ReceiveMessages() {
        byte[] buffer = new byte[1024];

        while (webSocket != null && webSocket.State == WebSocketState.Open) {
            try {
                WebSocketReceiveResult result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                
                if (result.MessageType == WebSocketMessageType.Close) {
                    Debug.LogWarning("üîå Servidor solicitou fechamento da conex√£o");
                    break;
                }
                
                string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                
                // Ignora mensagens de ping
                if (message.StartsWith("PING:")) continue;
                
                Debug.Log($"üîµ Mensagem recebida do Admin: {message}");
                ProcessReceivedMessage(message);
            } catch (Exception e) {
                if (webSocket == null) break;
                
                Debug.LogError($"‚ùå Erro ao receber mensagem: {e.Message}");
                break;
            }
        }

        Debug.LogWarning("üö® Loop de recebimento de mensagens encerrado!");
        
        // S√≥ tenta reconectar se n√£o estiver em processo de reconex√£o e o objeto ainda existir
        if (!isReconnecting && webSocket != null && this != null && !this.isActiveAndEnabled) {
            Debug.Log("üîÑ Agendando reconex√£o ap√≥s falha no recebimento de mensagens");
            // Usar um coroutine em vez de Invoke para evitar problemas de refer√™ncia
            StartCoroutine(ReconnectAfterDelay(2f));
        }
    }
    
    // Novo m√©todo para substituir o Invoke que estava causando problemas
    private IEnumerator ReconnectAfterDelay(float delay) {
        yield return new WaitForSeconds(delay);
        if (this != null && this.isActiveAndEnabled) {
            ReconnectWebSocket();
        }
    }

    void ProcessReceivedMessage(string message) {
        Debug.Log($"üì© Mensagem recebida do Admin: {message}");
        
        // Resetar o timer quando recebe qualquer mensagem
        waitingForCommands = false;
        waitingTimer = 0f;
        
        // Notificar o ConnectionHelper
        ConnectionHelper connectionHelper = FindObjectOfType<ConnectionHelper>();
        if (connectionHelper != null)
        {
            connectionHelper.NotifyMessageReceived(message);
        }

        if (message.StartsWith("play:")) {
            string movieName = message.Substring(5).Trim();
            PlayVideoWithFade(movieName);
        } 
        else if (message.Contains("pause")) {
            PauseVideo();
        } 
        else if (message.Contains("resume")) {
            ResumeVideo();
        } 
        else if (message.Contains("stop")) {
            StopVideo();
        } 
        else if (message.StartsWith("aviso:")) {
            string avisoMensagem = message.Substring(6).Trim();
            ShowTemporaryMessage(avisoMensagem);
        } 
        else if (message.StartsWith("seek:")) {
            string timeStr = message.Substring(5).Trim(); // Corre√ß√£o para pegar apenas o valor num√©rico
            if (double.TryParse(timeStr, out double time)) {
                if (videoPlayer != null) {
                    videoPlayer.time = time;
                    Debug.Log($"‚è±Ô∏è V√≠deo posicionado para: {time:F2} segundos");
                }
            } else {
                Debug.LogWarning($"‚ö†Ô∏è Valor inv√°lido para 'seek': {message}");
            }
        } 
        else {
            Debug.LogWarning($"‚ö†Ô∏è Mensagem desconhecida recebida: {message}");
        }
    }

    void ShowTemporaryMessage(string message) {
        if (messageText != null) {
            messageText.text = message;
            messageText.gameObject.SetActive(true);
        }
    }

    IEnumerator HideMessageAfterDelay(float delay) {
        yield return new WaitForSeconds(delay);
        HideMessage();
    }

    // Oculta a mensagem
    void HideMessage() {
        if (messageText != null) {
            messageText.gameObject.SetActive(false);
        }
    }

    void OnMessageReceived(string message) {
        Debug.Log($"üì© Mensagem recebida do Admin: {message}");

        // Exibe a mensagem ao receber do Admin
        if (messageText != null) {
            messageText.text = message;
            messageText.gameObject.SetActive(true);
        }

        ProcessReceivedMessage(message);
    }

    void OnVideoEnd(VideoPlayer vp) {
        Debug.Log("üé¨ V√≠deo conclu√≠do! Retornando ao lobby...");
        StopVideoWithFade();
    }

    IEnumerator FadeIn(Action onComplete = null) {
        float duration = 0.7f;
        float elapsedTime = 0;
        Material fadeMat = fadeSphere.GetComponent<Renderer>().material;

        while (elapsedTime < duration) {
            elapsedTime += Time.deltaTime;
            float alpha = Mathf.Lerp(0, 1, elapsedTime / duration);
            fadeMat.color = new Color(0, 0, 0, alpha);
            yield return null;
        }

        onComplete?.Invoke();
    }

    IEnumerator FadeOut() {
        float duration = 0.7f;
        float elapsedTime = 0;
        Material fadeMat = fadeSphere.GetComponent<Renderer>().material;

        while (elapsedTime < duration) {
            elapsedTime += Time.deltaTime;
            float alpha = Mathf.Lerp(1, 0, elapsedTime / duration);
            fadeMat.color = new Color(0, 0, 0, alpha);
            yield return null;
        }
    }

    IEnumerator FadeOutToIdle() {
        float duration = 0.7f;
        float elapsedTime = 0;
        Material fadeMat = fadeSphere.GetComponent<Renderer>().material;

        while (elapsedTime < duration) {
            elapsedTime += Time.deltaTime;
            float alpha = Mathf.Lerp(1, 0, elapsedTime / duration);
            fadeMat.color = new Color(0, 0, 0, alpha);
            yield return null;
        }

        videoPlayer.targetCameraAlpha = 0;
        videoPlayer.gameObject.SetActive(false);
    }

    void SetFadeAlpha(float alpha) {
        Material fadeMat = fadeSphere.GetComponent<Renderer>().material;
        fadeMat.color = new Color(0, 0, 0, alpha);
    }

    void SendTimecode() {
        if (videoPlayer.isPlaying) {
            float currentTime = (float)videoPlayer.time;
            string timecodeMessage = $"TIMECODE:{currentTime:F1}";

            Debug.Log($"‚è±Ô∏è Enviando timecode: {timecodeMessage}");

            if (webSocket != null && webSocket.State == WebSocketState.Open) {
                byte[] data = Encoding.UTF8.GetBytes(timecodeMessage);
                webSocket.SendAsync(new ArraySegment<byte>(data), WebSocketMessageType.Text, true, CancellationToken.None);
            } else {
                Debug.LogError("‚ùå Erro ao enviar timecode: WebSocket n√£o est√° conectado.");
            }
        }
    }

    async void SendClientInfo() {
        string clientName = SystemInfo.deviceName;
        string clientIP = GetLocalIPAddress();
        string clientOS = SystemInfo.operatingSystem;
        int batteryLevel = GetBatteryLevel();

        string infoMessage = $"CLIENT_INFO:{clientName}|{clientIP}|{clientOS}|{batteryLevel}%";

        if (webSocket.State == WebSocketState.Open) {
            byte[] data = Encoding.UTF8.GetBytes(infoMessage);
            await webSocket.SendAsync(new ArraySegment<byte>(data), WebSocketMessageType.Text, true, CancellationToken.None);
            Debug.Log($"‚úÖ Enviando informa√ß√µes do cliente: {infoMessage}");
        }
    }

    // Obt√©m o n√≠vel da bateria no Android ou no Windows
    int GetBatteryLevel() {
        #if UNITY_ANDROID && !UNITY_EDITOR
        using (AndroidJavaClass unityPlayer = new AndroidJavaClass("com.unity3d.player.UnityPlayer"))
        using (AndroidJavaObject activity = unityPlayer.GetStatic<AndroidJavaObject>("currentActivity"))
        using (AndroidJavaObject intentFilter = new AndroidJavaObject("android.content.IntentFilter", "android.intent.action.BATTERY_CHANGED"))
        using (AndroidJavaObject batteryStatus = activity.Call<AndroidJavaObject>("registerReceiver", null, intentFilter)) {
            int level = batteryStatus.Call<int>("getIntExtra", "level", -1);
            int scale = batteryStatus.Call<int>("getIntExtra", "scale", -1);
            if (level == -1 || scale == -1) return -1;
            return (int)((level / (float)scale) * 100);
        }
        #elif UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN
        return (int)(SystemInfo.batteryLevel * 100); // Em alguns PCs pode n√£o funcionar corretamente
        #else
        return -1; // Plataforma n√£o suportada
        #endif
    }

    string GetLocalIPAddress() {
        string localIP = "127.0.0.1";
        foreach (var ip in System.Net.Dns.GetHostAddresses(System.Net.Dns.GetHostName())) {
            if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork) {
                localIP = ip.ToString();
                break;
            }
        }
        return localIP;
    }

    void OnDestroy() {
        // Limpa as invoca√ß√µes pendentes
        CancelInvoke();
        
        // Fecha a conex√£o WebSocket de forma limpa
        if (webSocket != null && webSocket.State == WebSocketState.Open) {
            try {
                // A opera√ß√£o √© ass√≠ncrona, mas no OnDestroy n√£o podemos aguardar
                // Estamos apenas iniciando o processo de fechamento
                webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Aplicativo fechado", CancellationToken.None);
            } catch (Exception e) {
                Debug.LogError($"‚ùå Erro ao fechar WebSocket: {e.Message}");
            }
        }
    }

    // M√©todos de teste para diagn√≥stico
    public void TestPlayVideo(string videoName) {
        if (string.IsNullOrEmpty(videoName)) {
            videoName = videoFiles.Length > 0 ? videoFiles[0] : "rio.mp4";
        }
        
        Log("Teste de reprodu√ß√£o manual: " + videoName);
        PlayVideoWithFade(videoName);
    }
    
    public void TestConnection() {
        Log("Teste de conex√£o manual");
        offlineMode = false;
        ReconnectWebSocket();
    }
    
    public void TestListFiles() {
        Log("Teste de listagem de arquivos manual");
        DebugExternalStorageFiles();
    }

    // M√©todo para testar se consegue iniciar um v√≠deo sem servidor
    public void ForcePlayVideo(string videoName = "")
    {
        if (string.IsNullOrEmpty(videoName))
        {
            // Tentar encontrar um v√≠deo dispon√≠vel
            string[] availableVideos = null;
            
            try {
                string externalPath = Path.Combine("/sdcard", "Download");
                if (Directory.Exists(externalPath))
                {
                    availableVideos = Directory.GetFiles(externalPath, "*.mp4");
                }
            }
            catch (Exception e) {
                LogError("Erro ao listar v√≠deos dispon√≠veis: " + e.Message);
            }
            
            if (availableVideos != null && availableVideos.Length > 0)
            {
                // Usar o primeiro v√≠deo encontrado
                string fileName = Path.GetFileName(availableVideos[0]);
                videoName = fileName;
                Log("V√≠deo encontrado para reprodu√ß√£o for√ßada: " + fileName);
            }
            else if (videoFiles.Length > 0)
            {
                // Usar o primeiro da lista padr√£o
                videoName = videoFiles[0];
            }
            else
            {
                // √öltimo recurso
                videoName = "rio.mp4";
            }
        }
        
        // Ativar modo offline
        Log("Ativando modo offline para reprodu√ß√£o for√ßada");
        offlineMode = true;
        
        // Reproduzir o v√≠deo
        Log("For√ßando reprodu√ß√£o de: " + videoName);
        PlayVideoWithFade(videoName);
    }

    // Novo m√©todo para iniciar automaticamente o primeiro v√≠deo dispon√≠vel
    void AutoStartFirstVideo()
    {
        if (hasAutoStarted) return;  // Evita m√∫ltiplos autostarts
        
        hasAutoStarted = true;
        Debug.Log("üîÑ Iniciando reprodu√ß√£o autom√°tica do primeiro v√≠deo dispon√≠vel...");
        
        // Se j√° estiver reproduzindo um v√≠deo, n√£o faz nada
        if (isPlaying) return;
        
        // Tenta encontrar v√≠deos dispon√≠veis no armazenamento externo
        string[] availableVideos = null;
        try {
            string externalPath = Path.Combine("/sdcard", "Download");
            if (Directory.Exists(externalPath))
            {
                availableVideos = Directory.GetFiles(externalPath, "*.mp4");
            }
        }
        catch (Exception e) {
            LogError("Erro ao listar v√≠deos dispon√≠veis para autostart: " + e.Message);
        }
        
        string videoToPlay = "";
        
        // Se encontrou v√≠deos externos, usa o primeiro
        if (availableVideos != null && availableVideos.Length > 0)
        {
            videoToPlay = Path.GetFileName(availableVideos[0]);
            Log("Autostart: V√≠deo externo encontrado: " + videoToPlay);
        }
        // Sen√£o, tenta usar um da lista pr√©-definida
        else if (videoFiles.Length > 0)
        {
            videoToPlay = videoFiles[0];
            Log("Autostart: Usando v√≠deo da lista pr√©-definida: " + videoToPlay);
        }
        else
        {
            // √öltimo recurso
            videoToPlay = "rio.mp4";
            Log("Autostart: Usando v√≠deo padr√£o: " + videoToPlay);
        }
        
        // Reproduzir o v√≠deo
        Log("Iniciando reprodu√ß√£o autom√°tica de: " + videoToPlay);
        PlayVideoWithFade(videoToPlay);
        
        // Atualizar UI
        if (messageText != null) {
            messageText.text = "Modo offline: reproduzindo " + videoToPlay;
        }
    }

    // Corrigir o m√©todo para encontrar corretamente os scripts conflitantes
    void DisableConflictingScripts() {
        // Verificar se h√° um CameraRotationLimiter na cena e desativ√°-lo
        var allScripts = FindObjectsOfType<MonoBehaviour>();
        bool foundLimiter = false;
        
        foreach (var script in allScripts) {
            // Procurar CameraRotationLimiter
            if (script.GetType().Name == "CameraRotationLimiter") {
                script.enabled = false; // Desativa o script sem remover o componente
                Log("CameraRotationLimiter encontrado e desativado. Usando controle centralizado no VRManager.");
                foundLimiter = true;
            }
            
            // Verificar ViewSetup - mantemos ele ativo, mas temos que coordenar
            if (script.GetType().Name == "ViewSetup") {
                if (script.enabled) {
                    Log("ViewSetup encontrado e ativo. VRManager ir√° coordenar o controle da rota√ß√£o.");
                }
            }
        }
        
        if (!foundLimiter) {
            Log("Nenhum CameraRotationLimiter encontrado. VRManager j√° tem controle total.");
        }
    }

    // Inicializa o caminho do armazenamento externo
    void InitializeExternalStorage() {
        try {
            #if UNITY_ANDROID && !UNITY_EDITOR
            // No Android, configurar para o diret√≥rio de download padr√£o
            externalStoragePath = Path.Combine("/sdcard", externalFolder);
            
            // Verificar se o diret√≥rio existe
            if (!Directory.Exists(externalStoragePath)) {
                // Tentar diret√≥rio alternativo
                externalStoragePath = Path.Combine(Application.persistentDataPath, externalFolder);
                if (!Directory.Exists(externalStoragePath)) {
                    // Criar o diret√≥rio se n√£o existir
                    Directory.CreateDirectory(externalStoragePath);
                }
            }
            Log($"Armazenamento externo configurado para: {externalStoragePath}");
            #else
            // No editor ou outras plataformas, usar StreamingAssets
            externalStoragePath = Application.streamingAssetsPath;
            Log($"Usando StreamingAssets para v√≠deos: {externalStoragePath}");
            #endif
            
            // Listar os arquivos dispon√≠veis
            DebugExternalStorageFiles();
        } catch (Exception e) {
            LogError($"Erro ao inicializar armazenamento externo: {e.Message}");
            // Fallback para caminho interno
            externalStoragePath = Application.streamingAssetsPath;
        }
    }
    
    // M√©todo para ajudar no diagn√≥stico do acesso a arquivos externos
    void DebugExternalStorageFiles() {
        if (!diagnosticMode) return;
        
        try {
            string[] searchPaths = new string[] { 
                externalStoragePath,
                Application.streamingAssetsPath,
                Application.persistentDataPath,
                "/sdcard/Download",
                "/sdcard/Movies"
            };
            
            foreach (string path in searchPaths) {
                if (!Directory.Exists(path)) {
                    Log($"Diret√≥rio n√£o encontrado: {path}");
                    continue;
                }
                
                string[] files = Directory.GetFiles(path, "*.mp4");
                if (files.Length > 0) {
                    Log($"Encontrados {files.Length} v√≠deos MP4 em: {path}");
                    foreach (string file in files) {
                        Log($"  - {Path.GetFileName(file)}");
                    }
                } else {
                    Log($"Nenhum v√≠deo MP4 encontrado em: {path}");
                }
            }
        } catch (Exception e) {
            LogError($"Erro ao listar arquivos: {e.Message}");
        }
    }

    // M√©todo para for√ßar a solicita√ß√£o de permiss√£o de armazenamento no Android
    void ForceRequestStoragePermission() {
        #if UNITY_ANDROID && !UNITY_EDITOR
        try {
            using (AndroidJavaClass unityPlayer = new AndroidJavaClass("com.unity3d.player.UnityPlayer"))
            using (AndroidJavaObject activity = unityPlayer.GetStatic<AndroidJavaObject>("currentActivity"))
            using (AndroidJavaObject context = activity.Call<AndroidJavaObject>("getApplicationContext")) {
                // Verificar vers√µes do Android e permiss√µes necess√°rias
                string[] permissions = new string[] {
                    "android.permission.READ_EXTERNAL_STORAGE",
                    "android.permission.WRITE_EXTERNAL_STORAGE"
                };
                
                bool hasPermissions = true;
                foreach (string permission in permissions) {
                    int checkResult = activity.Call<int>("checkSelfPermission", permission);
                    if (checkResult != 0) { // PackageManager.PERMISSION_GRANTED == 0
                        hasPermissions = false;
                        break;
                    }
                }
                
                if (!hasPermissions) {
                    Debug.Log("‚ö†Ô∏è Solicitando permiss√µes de armazenamento...");
                    activity.Call("requestPermissions", permissions, 101);
                } else {
                    Debug.Log("‚úÖ Permiss√µes de armazenamento j√° concedidas");
                }
            }
        } catch (Exception e) {
            LogError($"Erro ao solicitar permiss√µes: {e.Message}");
        }
        #endif
    }

    void InitializeCameraReferences()
    {
        // Primeiro tentar usar a c√¢mera configurada manualmente
        if (mainCamera != null)
        {
            activeCamera = mainCamera.transform;
            Log("Usando c√¢mera configurada manualmente: " + mainCamera.name);
            return;
        }

        #if UNITY_ANDROID && !UNITY_EDITOR
        // No Quest, tentar encontrar a c√¢mera do XR Rig
        if (xrOrigin != null)
        {
            var xrCamera = xrOrigin.GetComponentInChildren<Camera>();
            if (xrCamera != null)
            {
                activeCamera = xrCamera.transform;
                Log("Usando c√¢mera do XR Rig: " + xrCamera.name);
                return;
            }
        }
        
        // Procurar por c√¢meras com nomes comuns do Quest
        string[] questCameraNames = new string[] { "CenterEyeAnchor", "OVRCameraRig" };
        foreach (string name in questCameraNames)
        {
            var questCamera = GameObject.Find(name)?.GetComponent<Camera>();
            if (questCamera != null)
            {
                activeCamera = questCamera.transform;
                Log("Usando c√¢mera Quest encontrada: " + questCamera.name);
                return;
            }
        }
        #endif

        // Fallback para Camera.main
        if (Camera.main != null)
        {
            activeCamera = Camera.main.transform;
            Log("Usando Camera.main: " + Camera.main.name);
            return;
        }

        // √öltimo recurso: procurar qualquer c√¢mera na cena
        var cameras = FindObjectsOfType<Camera>();
        if (cameras.Length > 0)
        {
            activeCamera = cameras[0].transform;
            LogWarning("Usando primeira c√¢mera encontrada: " + cameras[0].name);
            return;
        }

        LogError("Nenhuma c√¢mera encontrada! O sistema de rota√ß√£o n√£o funcionar√°.");
    }

    #if UNITY_EDITOR
    [MenuItem("Ferramentas/Compilar Windows %#b")]
    public static void BuildWindowsPlayerDirectly()
    {
        BuildWindowsPlayer("Builds/Windows", "SocketClient", false, true);
    }

    public static void BuildWindowsPlayer(string buildPath, string buildName, bool developmentBuild, bool showLogs)
    {
        try
        {
            // Salva a plataforma atual
            BuildTarget currentTarget = EditorUserBuildSettings.activeBuildTarget;
            BuildTargetGroup currentTargetGroup = EditorUserBuildSettings.selectedBuildTargetGroup;
            
            // Define o caminho completo da build
            string fullPath = Path.Combine(Application.dataPath, "..", buildPath);
            
            // Cria o diret√≥rio se n√£o existir
            if (!Directory.Exists(fullPath))
            {
                Directory.CreateDirectory(fullPath);
            }
            
            // Define o caminho do execut√°vel
            string exePath = Path.Combine(fullPath, buildName + ".exe");
            
            // Obt√©m as cenas ativas no build settings
            string[] scenes = GetEnabledScenes();
            
            if (scenes.Length == 0)
            {
                Debug.LogError("N√£o h√° cenas adicionadas ao Build Settings. Adicione pelo menos uma cena.");
                EditorUtility.DisplayDialog("Erro de Compila√ß√£o", 
                    "N√£o h√° cenas adicionadas ao Build Settings. Adicione pelo menos uma cena.", "OK");
                return;
            }
            
            // Define as op√ß√µes de build
            BuildPlayerOptions buildOptions = new BuildPlayerOptions
            {
                scenes = scenes,
                locationPathName = exePath,
                target = BuildTarget.StandaloneWindows64,
                options = developmentBuild ? BuildOptions.Development : BuildOptions.None
            };
            
            // Inicia a build
            if (showLogs)
                Debug.Log("Iniciando compila√ß√£o para Windows em: " + exePath);
                
            // Vers√£o para Unity mais recente que retorna BuildReport
            BuildReport report = BuildPipeline.BuildPlayer(buildOptions);
            BuildSummary summary = report.summary;
            
            // Verifica se houve erro
            if (summary.result == BuildResult.Succeeded)
            {
                if (showLogs)
                {
                    Debug.Log("Build conclu√≠da com sucesso!");
                    Debug.Log($"Tamanho: {summary.totalSize / 1048576} MB");
                    Debug.Log($"Tempo: {summary.totalTime.TotalSeconds:F2} segundos");
                }
                
                EditorUtility.DisplayDialog("Build Conclu√≠da", 
                    $"Build conclu√≠da com sucesso em:\n{exePath}", "OK");
                
                // Abre o explorador no local da build
                EditorUtility.RevealInFinder(fullPath);
            }
            else
            {
                string errorMessage = $"Build falhou com resultado: {summary.result}";
                Debug.LogError(errorMessage);
                EditorUtility.DisplayDialog("Erro de Compila√ß√£o", errorMessage, "OK");
            }
            
            // Restaura a plataforma original se for diferente
            if (currentTarget != BuildTarget.StandaloneWindows64)
            {
                if (showLogs)
                    Debug.Log($"Restaurando plataforma original: {currentTarget}");
                
                EditorUserBuildSettings.SwitchActiveBuildTarget(currentTargetGroup, currentTarget);
            }
        }
        catch (Exception e)
        {
            string errorMessage = $"Erro durante a compila√ß√£o: {e.Message}";
            Debug.LogError(errorMessage);
            EditorUtility.DisplayDialog("Erro de Compila√ß√£o", errorMessage, "OK");
        }
    }
    
    private static string[] GetEnabledScenes()
    {
        // Retorna todas as cenas habilitadas no Build Settings
        EditorBuildSettingsScene[] scenes = EditorBuildSettings.scenes;
        List<string> enabledScenes = new List<string>();
        
        foreach (EditorBuildSettingsScene scene in scenes)
        {
            if (scene.enabled)
            {
                enabledScenes.Add(scene.path);
            }
        }
        
        return enabledScenes.ToArray();
    }
    
    [MenuItem("Ferramentas/Compilador Windows")]
    public static void ShowBuilderWindow()
    {
        BuilderWindow window = EditorWindow.GetWindow<BuilderWindow>("Compilador Windows");
        window.Show();
    }
    
    // Classe para janela do editor
    public class BuilderWindow : EditorWindow
    {
        private string buildPath = "Builds/Windows";
        private string buildName = "SocketClient";
        private bool developmentBuild = false;
        private bool showLogs = true;
        
        private void OnGUI()
        {
            GUILayout.Label("Configura√ß√µes de Compila√ß√£o", EditorStyles.boldLabel);
            
            buildPath = EditorGUILayout.TextField("Caminho da Build:", buildPath);
            buildName = EditorGUILayout.TextField("Nome da Build:", buildName);
            developmentBuild = EditorGUILayout.Toggle("Build de Desenvolvimento:", developmentBuild);
            showLogs = EditorGUILayout.Toggle("Mostrar Logs:", showLogs);
            
            EditorGUILayout.Space();
            
            if (GUILayout.Button("Compilar para Windows"))
            {
                BuildWindowsPlayer(buildPath, buildName, developmentBuild, showLogs);
            }
        }
    }

    [MenuItem("Ferramentas/GitHub/Commit Altera√ß√µes %#g")]
    public static void CommitChangesToGitHub()
    {
        GitHubWindow window = EditorWindow.GetWindow<GitHubWindow>("GitHub Commit");
        window.Show();
    }
    
    [MenuItem("Ferramentas/GitHub/Ver Hist√≥rico")]
    public static void ShowGitHistory()
    {
        RunGitCommand("log --pretty=format:\"%h - %an, %ar : %s\" -10", "Hist√≥rico de Commits", true);
    }
    
    [MenuItem("Ferramentas/GitHub/Atualizar Reposit√≥rio")]
    public static void PullFromGitHub()
    {
        RunGitCommand("pull", "Atualizar do GitHub", true);
    }
    
    [MenuItem("Ferramentas/GitHub/Ver Status")]
    public static void CheckGitStatus()
    {
        RunGitCommand("status", "Status do Reposit√≥rio", true);
    }
    
    private static void RunGitCommand(string command, string title, bool showResult = false)
    {
        try
        {
            string workingDir = Path.GetDirectoryName(Application.dataPath);
            Process process = new Process();
            process.StartInfo.FileName = "git";
            process.StartInfo.Arguments = command;
            process.StartInfo.WorkingDirectory = workingDir;
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.RedirectStandardError = true;
            process.StartInfo.CreateNoWindow = true;
            
            string output = "";
            string error = "";
            
            process.OutputDataReceived += (sender, args) => {
                if (args.Data != null)
                    output += args.Data + "\n";
            };
            
            process.ErrorDataReceived += (sender, args) => {
                if (args.Data != null)
                    error += args.Data + "\n";
            };
            
            process.Start();
            process.BeginOutputReadLine();
            process.BeginErrorReadLine();
            process.WaitForExit();
            
            if (process.ExitCode != 0)
            {
                Debug.LogError($"Erro ao executar comando git: {error}");
                EditorUtility.DisplayDialog("Erro Git", $"Erro ao executar comando git:\n{error}", "OK");
            }
            else if (showResult)
            {
                Debug.Log($"Resultado do comando git: {output}");
                EditorUtility.DisplayDialog(title, output, "OK");
            }
        }
        catch (Exception e)
        {
            Debug.LogError($"Erro ao executar git: {e.Message}");
            EditorUtility.DisplayDialog("Erro", $"Falha ao executar git:\n{e.Message}", "OK");
        }
    }
    
    // Classe para janela de commits do GitHub
    public class GitHubWindow : EditorWindow
    {
        private string commitMessage = "";
        private Vector2 scrollPosition;
        private bool pushAfterCommit = true;
        private bool viewChangesFirst = true;
        private string gitStatus = "";
        private bool isRefreshing = false;
        
        private void OnEnable()
        {
            // Carregar o status do git ao abrir a janela
            RefreshGitStatus();
        }
        
        private void OnGUI()
        {
            GUILayout.Label("Commit para GitHub", EditorStyles.boldLabel);
            
            EditorGUILayout.Space();
            
            GUILayout.Label("Status do Reposit√≥rio", EditorStyles.boldLabel);
            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition, GUILayout.Height(150));
            GUI.enabled = false;
            EditorGUILayout.TextArea(isRefreshing ? "Carregando..." : gitStatus);
            GUI.enabled = true;
            EditorGUILayout.EndScrollView();
            
            if (GUILayout.Button("Atualizar Status"))
            {
                RefreshGitStatus();
            }
            
            EditorGUILayout.Space();
            
            GUILayout.Label("Mensagem de Commit (CHANGELOG):", EditorStyles.boldLabel);
            EditorGUILayout.HelpBox("Descreva quais altera√ß√µes foram feitas nesta vers√£o", MessageType.Info);
            
            // √Årea de texto para mensagem de commit
            commitMessage = EditorGUILayout.TextArea(commitMessage, GUILayout.Height(100));
            
            EditorGUILayout.Space();
            
            // Op√ß√µes
            viewChangesFirst = EditorGUILayout.Toggle("Visualizar altera√ß√µes antes", viewChangesFirst);
            pushAfterCommit = EditorGUILayout.Toggle("Push ap√≥s commit", pushAfterCommit);
            
            EditorGUILayout.Space();
            
            // Bot√µes
            EditorGUILayout.BeginHorizontal();
            
            if (GUILayout.Button("Visualizar Altera√ß√µes"))
            {
                RunGitCommand("diff", "Altera√ß√µes", true);
            }
            
            if (GUILayout.Button("Adicionar Tudo"))
            {
                RunGitCommand("add .", "Adicionar Arquivos", false);
                RefreshGitStatus();
            }
            
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.Space();
            
            // Verifica se a mensagem de commit est√° vazia
            GUI.enabled = !string.IsNullOrEmpty(commitMessage);
            
            if (GUILayout.Button("Commit & Push"))
            {
                PerformCommitAndPush();
            }
            
            GUI.enabled = true;
        }
        
        private void RefreshGitStatus()
        {
            isRefreshing = true;
            gitStatus = "Carregando...";
            
            EditorApplication.delayCall += () => {
                try
                {
                    string workingDir = Path.GetDirectoryName(Application.dataPath);
                    Process process = new Process();
                    process.StartInfo.FileName = "git";
                    process.StartInfo.Arguments = "status";
                    process.StartInfo.WorkingDirectory = workingDir;
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.StartInfo.CreateNoWindow = true;
                    
                    process.Start();
                    string output = process.StandardOutput.ReadToEnd();
                    process.WaitForExit();
                    
                    gitStatus = output;
                }
                catch (Exception e)
                {
                    gitStatus = $"Erro ao obter status: {e.Message}";
                    Debug.LogError($"Erro ao obter status do git: {e.Message}");
                }
                
                isRefreshing = false;
                Repaint();
            };
        }
        
        private void PerformCommitAndPush()
        {
            try
            {
                // Se o usu√°rio quiser visualizar as altera√ß√µes primeiro
                if (viewChangesFirst)
                {
                    RunGitCommand("diff --staged", "Altera√ß√µes para Commit", true);
                }
                
                // Adicionar arquivos ao staging, se ainda n√£o foram adicionados
                RunGitCommand("add .", "Adicionar Arquivos", false);
                
                // Fazer o commit com a mensagem
                string safeMessage = commitMessage.Replace("\"", "\\\"");
                RunGitCommand($"commit -m \"{safeMessage}\"", "Commit", false);
                
                // Push se selecionado
                if (pushAfterCommit)
                {
                    RunGitCommand("push", "Push para GitHub", false);
                }
                
                // Mostrar mensagem de sucesso
                EditorUtility.DisplayDialog("Sucesso", "Altera√ß√µes enviadas para o GitHub com sucesso!", "OK");
                
                // Limpar a mensagem de commit
                commitMessage = "";
                
                // Atualizar o status
                RefreshGitStatus();
            }
            catch (Exception e)
            {
                Debug.LogError($"Erro durante commit/push: {e.Message}");
                EditorUtility.DisplayDialog("Erro", $"Erro durante commit/push:\n{e.Message}", "OK");
            }
        }
    }

    [MenuItem("Ferramentas/VR/Verificar Configura√ß√µes para Quest 3 %#v")]
    public static void CheckQuestVRSettings()
    {
        StringBuilder report = new StringBuilder();
        report.AppendLine("Verifica√ß√£o de Configura√ß√µes para Meta Quest 3");
        report.AppendLine("============================================");
        report.AppendLine();
        
        bool hasIssues = false;
        
        // 1. Verificar a plataforma atual
        BuildTarget currentTarget = EditorUserBuildSettings.activeBuildTarget;
        if (currentTarget != BuildTarget.Android)
        {
            report.AppendLine("‚ùå Plataforma atual n√£o √© Android. Mude para Android nas configura√ß√µes de build.");
            hasIssues = true;
        }
        else
        {
            report.AppendLine("‚úÖ Plataforma Android selecionada corretamente");
        }
        
        // 2. Verificar XR Plugin Management
        bool xrPluginInstalled = false;
        bool oculusPluginEnabled = false;
        
        var packageList = UnityEditor.PackageManager.PackageInfo.GetAllRegisteredPackages();
        foreach (var package in packageList)
        {
            if (package.name == "com.unity.xr.management")
            {
                xrPluginInstalled = true;
                report.AppendLine($"‚úÖ XR Plugin Management instalado (vers√£o {package.version})");
            }
            
            if (package.name == "com.unity.xr.oculus")
            {
                report.AppendLine($"‚úÖ Oculus XR Plugin instalado (vers√£o {package.version})");
                
                // Verificar se est√° habilitado para Android
                if (EditorBuildSettings.TryGetConfigObject("UnityEditor.XR.ARCore.ARCoreSettings", out UnityEngine.Object obj))
                {
                    // N√£o conseguimos verificar diretamente, ent√£o adicionamos uma verifica√ß√£o manual
                    report.AppendLine("‚ö†Ô∏è Verifique se o Oculus est√° habilitado em Project Settings > XR Plugin Management > Android");
                }
            }
        }
        
        if (!xrPluginInstalled)
        {
            report.AppendLine("‚ùå XR Plugin Management n√£o encontrado. Instale pelo Package Manager.");
            hasIssues = true;
        }
        
        // 3. Verificar configura√ß√µes do Player
        var colorSpace = PlayerSettings.colorSpace;
        if (colorSpace != ColorSpace.Linear)
        {
            report.AppendLine("‚ùå O Color Space deve ser Linear para melhor qualidade VR. (Project Settings > Player > Other Settings)");
            hasIssues = true;
        }
        else
        {
            report.AppendLine("‚úÖ Color Space est√° configurado como Linear");
        }
        
        // 4. Verificar se est√° em fullscreen
        if (!PlayerSettings.defaultIsFullScreen)
        {
            report.AppendLine("‚ùå Fullscreen Window n√£o est√° ativado. (Project Settings > Player > Resolution and Presentation)");
            hasIssues = true;
        }
        else
        {
            report.AppendLine("‚úÖ Fullscreen Window est√° ativado");
        }
        
        // 5. Verificar orienta√ß√£o
        if (PlayerSettings.defaultInterfaceOrientation != UIOrientation.LandscapeLeft)
        {
            report.AppendLine("‚ö†Ô∏è A orienta√ß√£o padr√£o n√£o √© LandscapeLeft. Recomendado para Quest. (Project Settings > Player > Resolution and Presentation)");
        }
        else
        {
            report.AppendLine("‚úÖ Orienta√ß√£o padr√£o configurada como LandscapeLeft");
        }
        
        // 6. Verificar OVRManager (apenas se USING_OCULUS_SDK estiver definido)
        #if USING_OCULUS_SDK
        var ovrManager = GameObject.FindObjectOfType<OVRManager>();
        if (ovrManager == null)
        {
            report.AppendLine("‚ùå OVRManager n√£o encontrado na cena. Adicione um OVRCameraRig para experi√™ncia VR.");
            hasIssues = true;
        }
        else
        {
            report.AppendLine("‚úÖ OVRManager encontrado na cena");
        }
        #else
        report.AppendLine("‚ö†Ô∏è Oculus Integration n√£o instalado. Recomendado para a melhor experi√™ncia VR no Quest.");
        report.AppendLine("   Instale o Oculus Integration do Asset Store para uma experi√™ncia VR completa.");
        hasIssues = true;
        #endif
        
        // 7. Verificar configura√ß√µes da cena para visualiza√ß√£o 360¬∞
        var videoSpheres = FindObjectsOfType<Transform>().Where(t => 
            (t.name.Contains("Video") && t.name.Contains("Sphere")) ||
            (t.name.Contains("360") && t.name.Contains("Sphere")));
            
        if (!videoSpheres.Any())
        {
            report.AppendLine("‚ö†Ô∏è Nenhuma esfera de v√≠deo 360¬∞ encontrada na cena. Necess√°ria para experi√™ncia VR 360¬∞.");
        }
        else
        {
            report.AppendLine($"‚úÖ Encontrada(s) {videoSpheres.Count()} esfera(s) para v√≠deo 360¬∞");
            
            // Verificar cada esfera
            foreach (var sphere in videoSpheres)
            {
                var renderer = sphere.GetComponent<Renderer>();
                if (renderer != null && renderer.material != null)
                {
                    // Tentar verificar o shader/material
                    string shaderName = renderer.material.shader?.name ?? "Desconhecido";
                    report.AppendLine($"   - Esfera: {sphere.name}, Shader: {shaderName}");
                    
                    // Adicionar dica para verificar cull mode
                    report.AppendLine("   ‚ö†Ô∏è Verifique se o material est√° configurado para renderizar o INTERIOR da esfera (Cull Front)");
                }
            }
        }
        
        // 8. Verificar sistema de renderiza√ß√£o
        var renderPipeline = UnityEngine.Rendering.GraphicsSettings.renderPipelineAsset;
        if (renderPipeline != null)
        {
            report.AppendLine($"‚ö†Ô∏è Usando pipeline de renderiza√ß√£o personalizada: {renderPipeline.name}");
            report.AppendLine("   Certifique-se de que √© compat√≠vel com VR. Padr√£o recomendado para Quest 3.");
        }
        else
        {
            report.AppendLine("‚úÖ Usando pipeline de renderiza√ß√£o padr√£o (recomendado para Quest)");
        }
        
        // 9. VR RECOMENDA√á√ïES FINAIS
        report.AppendLine("\nRECOMENDA√á√ïES ADICIONAIS:");
        report.AppendLine("1. Configure o Quality Settings para otimizar desempenho no Quest 3");
        report.AppendLine("2. Para v√≠deos 360¬∞, use esferas com normais invertidas (apontando para dentro)");
        report.AppendLine("3. Posicione a c√¢mera sempre no centro da esfera de v√≠deo");
        report.AppendLine("4. Em seus materiais, desative 'ZWrite' para evitar problemas de profundidade");
        
        // 10. ADICIONAR INSTRU√á√ïES PARA INSTALAR OCULUS INTEGRATION
        report.AppendLine("\nINSTRU√á√ïES PARA INSTALAR OCULUS INTEGRATION:");
        report.AppendLine("1. Abra o Unity Asset Store (Window > Asset Store)");
        report.AppendLine("2. Busque por 'Oculus Integration' e baixe o pacote gratuitamente");
        report.AppendLine("3. Ap√≥s o download, selecione 'Import' (voc√™ pode desmarcar amostras para um pacote menor)");
        report.AppendLine("4. Durante a importa√ß√£o, responda 'Yes' para atualizar o Oculus Utilities para o formato do Unity");
        report.AppendLine("5. Quando solicitado para ativar o backend do XR, selecione 'Yes' ou configure depois em 'Project Settings'");
        report.AppendLine("6. Adicione #define USING_OCULUS_SDK no topo do VRManager.cs");
        
        // Exibir resultado
        if (hasIssues)
        {
            report.AppendLine("\n‚ùå Foram encontrados problemas nas configura√ß√µes que podem afetar a experi√™ncia VR 360¬∞.");
        }
        else
        {
            report.AppendLine("\n‚úÖ Todas as configura√ß√µes essenciais parecem corretas para experi√™ncia VR 360¬∞!");
        }
        
        // Exibir o relat√≥rio em uma janela
        VRDiagnosticWindow.ShowDiagnostic(report.ToString());
        
        Debug.Log(report.ToString());
    }
    
    // Classe para mostrar a janela de diagn√≥stico do VR
    public class VRDiagnosticWindow : EditorWindow
    {
        private string diagnosticText;
        private Vector2 scrollPosition;
        
        public static void ShowDiagnostic(string text)
        {
            VRDiagnosticWindow window = GetWindow<VRDiagnosticWindow>("Diagn√≥stico VR Quest 3");
            window.diagnosticText = text;
            window.Show();
        }
        
        private void OnGUI()
        {
            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);
            GUIStyle style = new GUIStyle(EditorStyles.textArea);
            style.wordWrap = true;
            style.richText = true;
            EditorGUILayout.TextArea(diagnosticText, style, GUILayout.ExpandHeight(true));
            EditorGUILayout.EndScrollView();
            
            EditorGUILayout.Space();
            
            if (GUILayout.Button("Abrir Configura√ß√µes do Player"))
            {
                EditorApplication.ExecuteMenuItem("Edit/Project Settings/Player");
            }
            
            if (GUILayout.Button("Abrir XR Plugin Management"))
            {
                EditorApplication.ExecuteMenuItem("Edit/Project Settings/XR Plugin Management");
            }
            
            if (GUILayout.Button("Fechar"))
            {
                Close();
            }
        }
    }
    #endif
}
